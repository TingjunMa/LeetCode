class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: bool
        """
        dp = [False] * (len(s)+1)
        dp[0] = True
        for i in range (len(s)):
            for j in range (i, len(s)+1):
                if dp[i] and s[i:j] in wordDict:
                    dp[j] = True
        return dp[-1]
        
        # The core of dp (Dynamic Programming) is to make sure the previous satisfies and the current satisfies, and finally achieve the whole is satisfied.
