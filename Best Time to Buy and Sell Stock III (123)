class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        k = 2
        if len(prices) < 2:
            return 0
        profit = 0
        if k >= len(prices)/2:
            for i in range (1, len(prices)):
                if prices[i] - prices[i-1] > 0:
                    profit += (prices[i] - prices[i-1])
            return profit
        globalMax = [[0] * len(prices) for i in range(k+1)]
        for i in range(1,k+1):
            # i: i times transactions
            localMax = [0] * len(prices)
            for j in range(1,len(prices)):
                # j: j position of the stock price
                profit = prices[j] - prices[j-1]
                localMax[j] = max(globalMax[i-1][j-1] + profit, globalMax[i-1][j-1] + 0, localMax[j-1] + profit)
                # i times transactions with the j position of the stock price can achieve the profit of:
                # 1, previous transaction with previous stock profit, and decide to buy in since previous stock and sell currently
                # 2, previous transaction with previous stock profit, and not to buy in since previous stock (perhaps negative profit) 
                # 3, this transaction with previous stock, but not to sell last time and sell it currently (perhaps gain more profit)
                globalMax[i][j] = max(globalMax[i][j-1], localMax[j])
                # choose which option makes greater profit when this new j stock comes: keep previous profit? buy or sell this one?  
        return globalMax[-1][-1] 
