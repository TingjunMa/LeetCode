# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        
        # DFS solution, use stack
        
        if root == None:
            return
        stack = [root]
        while stack:
            node = stack.pop()
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
            if stack:
                node.right = stack[-1]
            node.left = None;
            
            
        # recursive solution
        
        # if root == None:
        #     return
        # left = root.left
        # right = root.right
        # root.left = None
        # self.flatten(left)
        # self.flatten(right)
        # root.right = left             # put root.left node (left) to the root.right position 
        # cur = root                    # do not move root, move cur
        # while cur.right:              # if root.left node (left) is not empty
        #     cur = cur.right           # move cur to the right position
        # cur.right = right             # put root.right node (right) to the cur.right position
